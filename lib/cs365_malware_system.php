<?php
 if (!defined('ABSPATH'))
   exit;
 error_reporting(E_ERROR | E_PARSE);

 /*
  * To change this template, choose Tools | Templates
  * and open the template in the editor.
  */

 /**
  * Description of newPHPClass
  *
  * @author Brett Wraight
  */
 class cs365_malware_system
  {
  public function __construct($backup_type) {
   global $wpdb;
   $this->backup_type = $backup_type;

   $query = 'CREATE TABLE  IF NOT EXISTS cs365_malware_system (
  `id` int(15) NOT NULL AUTO_INCREMENT,
  `filename` char(150) DEFAULT NULL,
  `directory` tinytext,
  `file_path` tinytext,
  `wp_type` char(100) DEFAULT NULL,
  `hash_content` char(33) DEFAULT NULL,
  `hash_path` char(33) DEFAULT NULL,
  `date_inserted` int(16) DEFAULT NULL,
  `period` int(10) DEFAULT 0,
  `error` int(1) DEFAULT 0,
  `error_msg` tinytext,
  PRIMARY KEY (`id`),
  KEY `hash_content` (`hash_content`),
  KEY `hash_path` (`hash_path`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1';
   $wpdb->query($query);
  }

  function cs365listFiles($from = '.', $wp_type) {
   $folder_exclude = array();
   $this->wp_type = $wp_type;
   if (!is_dir($from))
     return false;
   $dirs = array($from);
   while (NULL !== ($dir = array_pop($dirs))) {
    if ($dh = opendir($dir)) {
     while (false !== ($file = readdir($dh))) {
      if ($file == '.' || $file == '..')
        continue;
      if ($wp_type == 'content')
        if (in_array($file, $folder_exclude))
         continue;
      $path = $dir . '/' . $file;
      if (is_dir($path)) {
       $dirs[] = $path;
      }
      else {
       $this->counter+=1;
       if ($this->counter > $this->start) {
        $this->files[] = $path;
       }
       if ($this->counter >= $this->finish) {
        if (count($this->files) <= 0)
          return false;
        $this->cs365__test_files();
        return true;
       }
      }
     }
     closedir($dh);
    }
   }
   if (count($this->files) <= 0)
     return false;
   $this->cs365__test_files();
   return true;
  }

  private function cs365__test_files() {
   require_once(WP_PLUGIN_DIR . '/cloudsafe365-for-wp/lib/cs365_malware_scan.php');
   $test = new cs365_malware_scan();
   for ($i = 0; $i < count($this->files); $i++) {
    if (!$this->cs365_file_test($this->files[$i]))
      continue;
    $str = file_get_contents($this->files[$i]);
    $file = pathinfo($this->files[$i]);
    $file['mtime'] = filemtime($this->files[$i]);
    $file['hash_content'] = md5(md5($str) . md5($this->files[$i]) . md5($file['mtime']));
    $file['hash_path'] = md5($this->files[$i]);
    $file['file_path'] = $this->files[$i];
    $this->info[] = $this->sc365_malwarefile_scanner($this->files[$i], $file['mtime']);
    ##run scaanner on file
    $tmp = $this->cs365_test_database($file);
    $this->prepdone[$i] = $tmp['what'];
    $test->cs365_scan_now($file['file_path'], $tmp['id'], '0', $_POST["next_scan"]);
    if (isset($test->detected_object)) {
     $this->prepdone[$i] = 'Detected';
     unset($test->detected_object);
    }
    unset($file);
    unset($tmp);
   }
  }

  private function cs365_test_database($file) {
   if (preg_match('/\.zip|\.exe|\.gz|\.rar/xsi', $file['basename'])) {
//		return 'Zip';
   }

   //$file_size = round(filesize($file['file_path']) / 1024, 2);
   //if ($file_size > 500) {
//			return 'Large';
   //}




   $request = "SELECT id,hash_content FROM cs365_malware_system WHERE
hash_path = '" . $file['hash_path'] . "'
AND date_inserted is not null LIMIT 1";
   $mysql = mysql_query($request);
   $num_mysql = mysql_num_rows($mysql);
   if ($num_mysql > 0) {
    list($id, $hash_content) = mysql_fetch_row($mysql);
    if ($hash_content != $file['hash_content']) {
     $tmp['id'] = $id;
     $tmp['what'] = 'Modified';
     return $tmp;
    }
   }

   $request = "SELECT id FROM cs365_malware_system WHERE hash_content = '" . $file['hash_content'] . "' LIMIT 1";
   $mysql = mysql_query($request);
   $num_mysql = mysql_num_rows($mysql);
   if ($num_mysql <= 0) {
    $request = "INSERT
INTO
	cs365_malware_system
SET
	filename = '" . mysql_real_escape_string($file['basename']) . "',
	directory = '" . mysql_real_escape_string($file['dirname']) . "',
	file_path = '" . mysql_real_escape_string($file['file_path']) . "',
	wp_type ='" . $file['extension'] . "',
	hash_content ='" . $file['hash_content'] . "',
	hash_path ='" . $file['hash_path'] . "'
";
    mysql_query($request) or print mysql_error();
    $id = mysql_insert_id();

    $request = "SELECT id FROM cs365_malware_system WHERE
hash_path = '" . $file['hash_path'] . "'
AND date_inserted is not null LIMIT 1";
    $mysql = mysql_query($request);
    $num_mysql = mysql_num_rows($mysql);
    if ($num_mysql > 0) {
     list($id) = mysql_fetch_row($mysql);
     $tmp['id'] = $id;
     $tmp['what'] = 'Modified';
     return $tmp;
    }
    $request = "UPDATE cs365_malware_system SET date_inserted = '" . time() . "' WHERE id = '$id' LIMIT 1";
    mysql_query($request) or print mysql_error();
    $tmp['id'] = $id;
    $tmp['what'] = 'New';
    return $tmp;
   }
   else {
    $request = "SELECT id FROM cs365_malware_system WHERE
hash_path = '" . $file['hash_path'] . "'
AND date_inserted is not null LIMIT 1";
    $mysql = mysql_query($request);
    $num_mysql = mysql_num_rows($mysql);
    if ($num_mysql > 0) {
     list($id) = mysql_fetch_row($mysql);
     $tmp['id'] = $id;
     $tmp['what'] = 'Unchanged';
     return $tmp;
    }
    $tmp['id'] = 0;
    $tmp['what'] = 'Modified';
    return $tmp;
   }
  }

  function cs365_file_test($file) {
   if (!is_file($file))
     return false;
   if (!file_exists($file))
     return false;
   if (!is_readable($file))
     return false;
   return true;
  }

  function sc365_malwarefile_scanner($file, $mtime) {
   $data['mime'] = '';
   $data['filemtime'] = $mtime;
   $data['size'] = round((filesize($file) / 1024), 2);
   $data['lines'] = count($data['content']);
   return $data;
  }

  }

?>